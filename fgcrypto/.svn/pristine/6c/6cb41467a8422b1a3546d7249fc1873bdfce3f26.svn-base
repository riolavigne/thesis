\section{Preliminaries: Model of Computation and Definitions}

The running times of all algorithms are analyzed in the RAM model of computation. 

Just as in normal exponential-gap cryptography we have a notion of probabilistic polynomial-time (PPT) adversaries, we can similarly define an adversary that runs in time less than expected for our fine-grained polynomial-time solvable problems. This notion is something we call probabilistic fine-grained time (or $\PFT{}$). Using this notion makes it easier to define things like OWFs and doesn't require carrying around time parameters through every reduction.

\begin{definition}
	An algorithm $\cA$ is an $\alpha(n)$ probabilistic fine-grained time, $\PFT{\alpha(n)}$, algorithm if there exists a constant $\delta > 0$ such that $\cA$ runs in time $O(\alpha(n)^{1-\delta})$.
\end{definition}
Note that in this definition, assuming $\alpha(n) \ge n$, any sub-polynomial factors can be absorbed into $\delta$.

Additionally, we will want a notion of 'negligibility' that cryptography has. Recall that a function $\negl(n)$ is negligible if for all polynomials $Q(n)$ and sufficiently large $n$, $\negl(n) < 1/Q(n)$. We will have a similar notion here, but we will use the words 'significant' and 'insignificant' corresponding to non-negligible and negligible respectively.


\begin{definition}
	A function $\insig(n)$ is \emph{insignificant} if
	\[\insig(n) < \frac{1}{n^{\Omega(1)}}.\]
	A function $\sig(n)$ is \emph{significant} if 
	\[\sig(n) \ge \frac{1}{n^{o(1)}}.\]
\end{definition}

Note that for every polynomial $f$, $1/f(n)$ is insignificant. Also notice that if a probability is significant for an event to occur after some process, then we only need to run that process a sub-polynomial number of times before the event will happen almost certainly. So, if we're calling a function that succeeds with a significant probability to get that event, we only need to call it a sub-polynomial number of times before getting a result, meaning our run-time doesn't increase even in a fine-grained sense; i.e. we can boost the probability of success of a randomized algoirthm from $1/\log(n)$ to $O(1)$ just by repeating it $O(\log(n))$ times.

\subsection{Fine-Grained Symmetric Crypto Primitives}

Ball et all defined fine-grained one-way functions (OWFs) in their work from 2017 \cite{avgCaseFineGrained}. They parameterize their OWFs with two functions: an inversion-time function $\alpha$ (how long it takes to \emph{invert} the function on $n$ bits), and an probability-of-inversion function $\epsilon$ (given $\alpha(n)^{1-\delta'}$ time, the probability any adversary can invert). The computation time is implicitely defined to be anything (noticeably) less than the time to invert: there exists a $\delta > 0$ such that $\alpha(n)^{1-\delta}$.
%We will make a slightly altered definition that captures the $\delta$ between the computer and the inverter.

\begin{definition}[$(\alpha, \epsilon)$-one-way functions]
	A function $f:\{0,1\}^* \to \{0,1\}^*$ is \emph{$(t, \epsilon)$-one-way} if, for some $\delta > 0$, it can be evaluated on $n$ bits in $O(\alpha(n))$ time, but for any $\delta' > 0$ and any adversary $\cA$ running in $O(\alpha(n)^{1 - \delta'})$ time and all sufficiently large $n$,
	\[\Pr_{x \gets \{0,1\}^n}\left[\cA(f(x)) \in f\inv(f(x))\right] \le \epsilon(n, \delta').\]
\end{definition}

Using our notation of $\PFT{\alpha(n)}$, we will similarly define OWFs, but with one fewer parameter. We will only be caring about $\alpha(n)$, the time to invert, and assume that the probability an adversary inverts with less time is insignificant.

\begin{definition}\label{def:fg-owf}
	A function $f:\{0,1\}^* \to \{0,1\}^*$ is $\alpha(n)$ fine-grained one-way (is an $\alpha(n)$-FGOWF) if there exists a constant $\delta > 0$ such that it takes time $\alpha(n)^{1-\delta}$ to evaluate $f$ on any input, and for all $\PFT{\alpha(n)}$ adversaries $\cA$,
	\[ \Pr_{x \gets \{0,1\}^n}\left[\cA(f(x)) \in f\inv(f(x))\right] \le \frac{1}{n^{\Omega(1)}}. \]
\end{definition}

In the next subsection, we will demonstrate that as long as there is a reasonably small chance of an adversary inverting a function, using the same approach to proving weak OWFs imply strong ones, we can get a OWF with an insignificant chance of inversion.

With traditional notions of cryptography there was always an exponential or at least super-polynomial gap between the amount of time required to evaluate and invert one-way functions. In the fine-grained setting we have a polynomial \emph{gap} to consider.
\begin{definition}\label{def:gap}
	The (relative) \emph{gap} of an $\alpha(n)$ fine-grained one-way function $f$ is the constant $\delta > 0$ such that it takes $\alpha(n)^{1-\delta}$ to compute $f$ but for all $\PFT{\alpha(n)}$ adversaries $\cA$,
	\[ \Pr_{x \gets \{0,1\}^n}\left[\cA(f(x)) \in f\inv(f(x))\right] \le \frac{1}{n^{\Omega(1)}}. \]
\end{definition}


