\section{Fine Grained One Way Functions}

\xxx{We want to have $t(n)>n$ and insist that $d$ is a constant.}

Recall the definition of a fine-grained OWF from BRSV.

\begin{definition}[BRSV]
	A function $f:\{0,1\}^* \to \{0,1\}^*$ is \emph{$(t, \epsilon)$-one-way} if, for some $\delta > 0$, it can be computed in $O(t(n)^{1 - \delta})$ time, but for any $\delta' > 0$ and any adversary $\cA$ running in $O(t(n)^{1 - \delta'})$ time and all sufficiently large $n$,
	\[\Pr_{x \gets \{0,1\}^n}\left[\cA(f(x)) \in f\inv(f(x))\right] \le \epsilon(n, \delta').\]
\end{definition}
\xxx{Do we get rid of the original definition? Maybe move it to preliminaries? I think we should be using our PFT notation}


\xxx{I think we want our defintions to capture the $\delta'$ more than we want them to caputre the $t(n)$. The $t(n)$ is, in my oppinion, not really the useful piece of information. } 

We will make a slightly altered definition that captures the $\delta$ between the computer and the inverter. 

\begin{definition}[$(d, \epsilon)$-one-way functions]
	A function $f:\{0,1\}^* \to \{0,1\}^*$ is \emph{$(d, \epsilon)$-one-way} if, for some $\delta > 0$, it can be computed in $O(t(n))$ time, but for any $\delta' > 0$ and any adversary $\cA$ running in $O(t(n)^{d - \delta'})$ time and all sufficiently large $n$,
	\[\Pr_{x \gets \{0,1\}^n}\left[\cA(f(x)) \in f\inv(f(x))\right] \le \epsilon(n, \delta').\]
\end{definition}

Using our notation of PFT$_k$, we can similarly define OWFs.
\begin{definition}
	A function $f:\{0,1\}^* \to \{0,1\}^*$ is $k$-fine-grained-one-way (is a $k$-FGOWF) if there exists $k' < k$ such that it takes time $\tilde O(n^{k'})$ to compute $f$ and for all PFT$_k$ adversaries $\cA$,
	\[ \Pr_{x \gets \{0,1\}^n}\left[\cA(f(x)) \in f\inv(f(x))\right] \le \insig(n). \]
\end{definition}

\subsection{Weak and Strong OWFs}

\xxx{I'm replacing most of our work with stuff that we talked about recently. It's still in the tex file}

Just as in normal cryptography, we can have a gradient of OWFs. We have medium $k$-FGOWFs, which will directly imply (strong) $k$-FGOWFs, and we will have nearly weak $k,k'$-FGOWFs, which will imply (strong) $k$-FGOWFs for some $1 - 1/\poly$ advantages.

\begin{definition}
	A function $f$ is a medium $k$-FGOWF if there exists a sub-polynomial function $Q(n)$ such that for all PFT$_k$ adversaries $\cA$,
	\[ \Pr_{x \getsr \{0,\}^n}[ \cA(f(x)) \in f\inv(f(x)) ] \le 1 - \frac 1 {Q(n)}. \]
\end{definition}

\begin{claim}
	Medium $k$-FGOWFs imply strong $k$-FGOWFs.
\end{claim}
\begin{proof}
	\xxx{This is pretty easy. Just string them together.}
	Let $f$ be a medium $k$-FGOWF. For any constant positive integer $c$, let $f'(x_1 || \dots || x_c) = f(x_1)|| \dots ||f(x_c)$. Now, consider any adversary $\cA$ with probability $\epsilon$ of inverting $f'$
	%TODO: maybe not super simple. this should work, tho
\end{proof}

Now, because we are in the fine-grained setting, we can talk about gaps. There is a notion of weak-OWFs in cryptography where we can say if there exists \emph{any} polynomial such that we can invert with probability $1 - 1/\poly$, we can construct strong OWFs. We want a similar notion for fine-grained OWFs. Here we can't just choose any polynomial --- we have to choose a polynomial strictly less than the gap between computing and inverting. From there, we can build a strong $k$-FGOWF (which does not care what the gap is, as long as one exists).

\begin{definition}
	A function $f$ is a nearly-weak $k,k'$-FGOWF if there exists a function $Q(n) \le O(n^{k-k'-\delta})$ for a constant $\delta > 0$ such that for all PFT$_k$ adversaries $\cA$,
	\[ \Pr_{x \getsr \{0,\}^n}[ \cA(f(x)) \in f\inv(f(x)) ] \le 1 - \frac 1 {Q(n)}. \]
\end{definition}

\begin{claim}
	Nearly-weak $k,k'$-FGOWFs imply strong $k$-FGOWFs.
\end{claim}
\begin{proof}
	%TODO: it's gonna look like the previous proof
\end{proof}

%\remove{
\xxx{There are some problems with these definitions. Need to work out where $\delta'$ comes in etc.}

Just like in the usual cryptographic setting we have weak and strong OWFs (and weak OWFs imply strong OWFs), we have our own fine-grained version of weak and strong OWFs -- one will imply the other. There will be two versions: a `gap preserving' one-way function we will call a medium OWF, and an $\epsilon$-weak OWF.

%TODO: there are some problems with these definitions...

\paragraph{Definitions } 
These functions will define the $\epsilon(n,\delta')$ to be different functions. In our first definition $\epsilon$ won't even depend on $\delta'$. It asks that the adversary have a sub-polynomial error in $n$.

\begin{definition}[$d$-medium one-way functions]
	A function $f: \{0,1\}^n \to \{0,1\}^*$ is $d$-medium one-way if $f(x)$ can be computed in $O(t(n))$ time and for all adversaries $\cA$ taking $O(t(n)^{g-\delta'})$ time for some $\delta'>0$, there exists a sub-polynomial function $
	\epsilon(n)$ such that,
	\[ \Pr_{x \gets \{0,1\}^n}\left[ \cA(f(x)) \in f\inv(x) \right] \le 1 - \frac 1 {\epsilon(n)} \]
	%TODO: where does \delta' factor into this definition?
	%%Andrea: I don't think it does. I think that we beleive that we can construct functions where, when \delta'>0 for any delta, the success is thus bounded. 
\end{definition}

In the above definition we force the adversary to err quite a bit. What about adversaries that err only $\frac{1}{\text{poly}(n)}$? Well, given that computing $f(n)$ takes $t(n)$ time and inverting $f(n)$ takes $t(n)^g$ time if the adversary errs, for example, $\frac{1}{t(n)^{g+1}}$ of the time, we could not detect this in $t(n)^g$ time. 

But, the difference between inverting and solving gives us some space to work with, and in that space we can have certain amounts of error. 

\begin{definition}
	A function $f: \{0,1\}^n \to \{0,1\}^*$ is $(d,\epsilon)$-weak one-way if $f(x)$ can be computed in $O(t(n))$ time and for all adversaries $\cA$ taking $O(t(n)^{d-\delta'})$ time, there exists a function $g(n) = o(t(n)^{d-1-\epsilon})$ such that
	\[ \Pr_{x \gets \{0,1\}^n}\left[ \cA(f(x)) \in f\inv(x) \right] \le 1 - \frac 1 {g(n)} \]
\end{definition}

\paragraph{Implications } 
\begin{theorem}
The existence of a $d$-medium one-way function, $f$, implies the  existence of a $(d, n^{-c})$-one-way function, $f'$, for all constants $c$.
\end{theorem}
\begin{proof}
Let the probability of correct inversion of $f$ be upper bounded by $1-\frac 1 {g(n)}$. 
	
We can draw $2cg(n)\lg(n)$  independent samples $x_1, \ldots , x_{2cg(n)\lg(n)}$ from $\{0,1\}^n$. Now, our new one way function is $f'(x_1|x_2| \ldots |x_{2cg(n)\lg(n)}) = f(x_1)||f(x_2)||\ldots||f(x_{2cg(n)\lg(n)})$. Correctly inverting the function $f'$ requires inverting $2cg(n)\lg(n)$ samples. The probability of correct inversion of this new function will be 
$(1-\frac 1 {g(n)})^{2g(n)\cdot c\lg(n)} < $

\end{proof}

\begin{theorem}
	The existence of a $(d,\epsilon)$-weak one-way function implies the  existence of a $(d/(d-\epsilon), n^{-c})$-one-way function for all constants $c$.
\end{theorem}
\begin{proof}
	
	\xxx{We build this proof by doing many repetitions of the medium one way functions. Repeating the function $cg(n)\lg(n)$ times achieves this while preserving the polynomial gap.}
\end{proof}


\subsection{Construction of a FG OWF}

\begin{lemma}
Given an average case instance of k-clique with values drawn from a sufficiently large range $R$ we can efficiently generate an average case instance by planting a solution. 

That is, there exists a procedure $P$ which runs in time $O(n^{k-2}+k^2)$ time which generates an instance with one solution uniformly from all instances with one solution, given that we were given an instance with no solutions uniformly at random. 
	\label{lem:kcliquePlant}
\end{lemma}
\begin{proof}
	\xxx{TODO: but you know, its not so hard to prove this}
\end{proof}

Given $I,(a,b,c)$ and, $(w_{a,b}, w_{b,c})$ let $I'$ be an instance of $I$ with three edge weights changed. Specifically, set $w(e_{a,b})= w_{a,b}$, $w(e_{b,c})= w_{b,c}$ and, $w(e_{c,a})= -w_{a,b}-w_{b,c}$.

\begin{definition}
Let $I$ be an instance of $0$ k-clique
Let $f_{kClique}$ be the function 
$$f_{kClique}(I,(a,b,c),(w_{a,b}, w_{b,c})) =
\begin{cases}
\emptyset , & \text{if }e(a,b), e(b,c),\text{or } e(c,a) \text{ are involved in a }0 \text{-triangle in I} \\
\emptyset , & \text{if }e(a,b), e(b,c),\text{or } e(c,a) \text{ are involved in }> \text{1  }0 \text{-triangles in I'} \\
I', & \text{else}
\end{cases}
$$
\end{definition}

\xxx{TODO: can we get away with not checking for the null characters? It will still be hard over the distribution when the inputs are average case 0 solutions. Then computing $f$ will be $O(n^2)$ this doesn't matter unless $k>4$.}

\begin{theorem}
The function $f_{kClique}$ is a fine-grained one way function over the distribution of inputs drawn uniformly from $k$-Clique instances with $0$ solutions given the average case $0$-k Clique assumption. 
\label{thm:kcliqueOWF}
\end{theorem}
\begin{proof}
Computing $f_{kClique}$ takes $n^{k-2}$ time when the instance $I$ has $n$ nodes. 

Let $D_I$ be the uniform distribution over $0$-k clique instances with $0$ solutions. \\
Let $D_{a,b,c)}$ be the uniform distribution of triples with each value chosen uniformly from $[1,n]$.\\
Let $D_{w}$ be the distribution from Lemma \ref{lem:kcliquePlant} that generates average case solutions. \\
Let $D_{in}$ be the distribution made by sampling $I$ from $D_I$, $(a,b,c)$ from $D_{(a,b,c)}$ and $(w_{a,b},\ldots)$ from $D_{w}$.

Let the Adversary have a $\epsilon$ probability of inverting the function when the input to the function is chosen from $D_{in}$.

We will then use the adversary to distinguish a random $0$ solution instance from a $1$ solution instance. If we are given an instance $\hat{I}$ then we give the adversary this instance and ask for an inversion. 

If the instance has $0$ solutions the adversary will be unable to invert (no $(a,b,c)$ triple will form a $0$-triangle). If the instance has $1$ solution, this is by Lemma \ref{lem:kcliquePlant} going to be the same distribution as applying the function to the distribution from $D_{in}$. 

Thus, the Adversary will invert the function and find the $0$-k clique an $\epsilon$ fraction of the time. If the Adversary fails we will guess $0$ solutions, if the Adversary succedes we will guess $1$ solution. 

Given that  $\hat{I}$ has a $1/2$ chance of being a $0$ input then we guess correctly $1/2+\epsilon$ of the time. 

Thus, the Adversary can not invert the function correctly with probability $\geq 1/3$.
\end{proof}

\subsection{Hardcore Bits}
\xxx{TODO: standardize this notation with the notation used earlier.}
The standard GL construction for getting hardcore bits out of a OWF may not actually work in some cases. However, for our construction, there is an obvious candidate: note that the only hard part of inverting our construction is figuring out where the 0-clique is (in particular, it's just the indices $(a_1, \dots, a_{\binom k 2})$). So, we will take our $f$ and produce $f'$ such that for $r \in \{0,1\}^{k \log R}$,
\[ f'(I, (a_1, \dots, a_{\binom k 2}), (\alpha_1, \dots, \alpha_{\binom k 2}), r) \mapsto I', r \]
and the hardcore bit $b(I, (a_1, \dots, a_{\binom k 2}), (\alpha_1, \dots, \alpha_{\binom k 2}), r) = \langle(a_1, \dots, a_{\binom k 2}), r\rangle$. Because we are dealing with $|r| = O(\log^2(r))$ instead of the entire length of the input, this is actually hardcore! The proof of this essentially follows directly from the proof that the GL bit is hardcore for normal cryptographic OWFs.

\begin{definition}
	A function $b$ is a fine-grained hard-core (FGHC) predicate for a $k$-FGOWF if for all PFT$_k$ adversaries $\cA$,
	\[ \Pr_{x \getsr \{0,1\}^n}[ \cA(f(x)) = b(x) ] \le \frac 1 2 + \insig(n) \]
\end{definition}

\begin{theorem}
	If there exists a constant $c \ge 0$ such that there is a $\log^c(n)$-size hard core $s$ a subset of an input to $f$, then $f'(x, r) = f(x)||r$ has the hardcore bit $\langle s, r \rangle$.
\end{theorem}

%TODO: write down our construction for why this works